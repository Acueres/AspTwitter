@using Blazored.LocalStorage

@inject HttpClient client
@inject AppUser appUser
@inject ILocalStorageService localStorage

    <div class="border-bottom border-secondary p-1">
        <b style="color: white; font-size: larger">@(user.Name)</b>
        <br />
        <span style="color: gray">@(DisplayCount(tweetCount)) Tweets</span>
    </div>
    <div class="pt-2">
        <img src="api/users/@user.Id/avatar" class="img rounded-circle"
             style="width: 100px; height: 100px; outline: none;" />

        @if (user.Id == appUser.Id)
        {
            <a type="button" class="btn btn-info float-right" href="profile/edit">Edit Profile</a>
        }
        else
        {
            @if (isFollowing)
            {
                <button class="btn btn-primary float-right" @onclick="async () => await appUser.UnfollowUser(user, client)">
                    Following
                </button>
            }
            else
            {
                <button class="btn btn-outline-primary float-right" @onclick="async () => await appUser.FollowUser(user, client)">
                    Follow
                </button>
            }
        }
    </div>
    <div class="border-bottom border-secondary pb-3">
        <b style="color: white; font-size: larger">@(user.Name)</b>
        <br />
        <span style="color: gray">@("@" + user.Username)</span>

        <p>
            <span style="color: lightgray;word-wrap: break-word;">@(user.About)</span>
        </p>

        <span class="oi oi-calendar" style="color: gray" aria-hidden="true"></span>
        <span style="color: gray">Joined on @(GetDate(user.DateJoined))</span>

        <p class="mt-2">
            <span style="color: white;">@(DisplayCount(user.FollowingCount))</span>
            <span class="mr-2" style="color: gray">Following</span>

            <span style="color: white;">@(DisplayCount(user.FollowerCount))</span>
            <span style="color: gray">Followers</span>
        </p>
    </div>

@code {
    [Parameter]
    public User user { get; set; }

    [Parameter]
    public int tweetCount { get; set; }

    private bool isFollowing = false;

    private string GetDate(DateTime timestamp)
    {
        return timestamp.Date.ToString("dd/M/yyyy");
    }

    private string DisplayCount(int n)
    {
        if (n >= 1e6)
        {
            double res = Math.Round(n / 1e5) / 10;

            return res + "M";
        }

        else if (n >= 1e3)
        {
            double res = Math.Round(n / 1e2) / 10;

            return res.ToString() + "K";
        }

        return n.ToString();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (appUser.Id != 0)
        {
            appUser.Following = await client.GetFromJsonAsync<List<User>>($"api/users/{appUser.Id}/following");
            isFollowing = appUser.Following.Any(e => e.Id == user.Id);
        }
    }
}