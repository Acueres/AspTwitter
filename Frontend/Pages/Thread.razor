@page "/tweet/{Id:int}"

@using Blazored.LocalStorage

@inject HttpClient client
@inject NavigationManager NavigationManager
@inject AppUser appUser
@inject ILocalStorageService localStorage

<div class="container-fluid border-left border-right border-top border-secondary">

    @if (entry is null)
    {
        <div class="d-flex justify-content-center m-5">
            <div class="spinner-border" style="color: whitesmoke;" role="status"></div>
        </div>
    } 
    else
    {
        <div class="row mt-3">
            <div class="col-sm-1">
                <img src="api/users/@entry.AuthorId/avatar" class="img rounded-circle"
                     style="width: 50px; height: 50px; outline: none; cursor: pointer" @onclick="() => GoToProfile(entry.Author)" />
            </div>
            <div class="col-auto">
                <a class="mr-1" style="color: white;" href="@(entry.Author.Username)">@(entry.Author.Name)</a>
                <br />
                <span class="mr-1" style="color: gray">@("@" + entry.Author.Username)</span>
            </div>
        </div>

        <div class="row m-2 mt-3">
            <span style="color: white; word-wrap: break-word; font-size: x-large">@(entry.Text)</span>
        </div>

        <div class="row m-2 mt-3 border-bottom border-top border-secondary">
            <span class="mt-3 mb-3" style="color:gray;">@(entry.Timestamp)</span>
        </div>

        <div class="row">
            <!--
            <div class="btn-group">
                <button class="btn shadow-none" style="color: gray">
                    <span class="oi oi-comment-square mr-2"></span> @DisplayCount(entry.CommentCount)
                </button>
                <button class="btn shadow-none ml-3" style="color: gray" @onclick="async () => await SetRetweet()">
                    <span class="oi oi-loop-square mr-2" style="@(isRetweeted ? "color: blue": "color: gray")"></span> @DisplayCount(entry.RetweetCount)
                </button>
                <button class="btn shadow-none ml-3" style="color: gray" @onclick="async () => await SetFavorite()">
                    <span class="oi oi-heart mr-2" style="@(isFavorite ? "color: blue": "color: gray")"></span> @DisplayCount(entry.LikeCount)
                </button>
            </div>-->
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Entry entry;

    /*private bool isFavorite;
    private bool isRetweeted;*/

    protected override async Task OnParametersSetAsync()
    {
        entry = await client.GetFromJsonAsync<Entry>($"api/entries/{Id}");
        Console.WriteLine(entry.Id);
        //isFavorite = appUser.Favorites.Any(e => e.Id == entry.Id);
        //isRetweeted = appUser.Retweets.Any(e => e.Id == entry.Id);
    }

    private void GoToProfile(User user)
    {
        NavigationManager.NavigateTo(user.Username);
    }

    /*private async Task SetFavorite()
    {
        if (!appUser.Logged) return;

        if (isFavorite)
        {
            await appUser.UnfavoriteEntry(entry, client);
            isFavorite = false;
        }
        else
        {
            await appUser.FavoriteEntry(entry, client);
            isFavorite = true;
        }

        StateHasChanged();
    }

    private async Task SetRetweet()
    {
        if (!appUser.Logged || appUser.Id == entry.AuthorId) return;

        if (isRetweeted)
        {
            await appUser.RemoveRetweet(entry, client);
            isRetweeted = false;
        }
        else
        {
            await appUser.AddRetweet(entry, client);
            isRetweeted = true;
        }

        StateHasChanged();
    }

    private string DisplayCount(int n)
    {
        if (n >= 1e6)
        {
            double res = Math.Round(n / 1e5) / 10;

            return res + "M";
        }

        else if (n >= 1e3)
        {
            double res = Math.Round(n / 1e2) / 10;

            return res.ToString() + "K";
        }

        return n.ToString();
    }*/
}
