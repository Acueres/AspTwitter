@page "/login"
@layout EmptyLayout

@using Frontend.Requests
@using Frontend.Models
@using Newtonsoft.Json
@using Blazored.LocalStorage
@using System.Net
@using System.Text
@using System.Net.Http

@inject HttpClient client
@inject NavigationManager NavigationManager
@inject AppUser appUser
@inject ILocalStorageService localStorage

<div class="container p-5 w-25 border border-secondary">
    <EditForm Model="@loginData" OnValidSubmit="@SendData" class="text-light">
        <h1>Log in</h1>
        <div class="mb-3 mt-3">
            <label class="form-label">Username</label>
            <InputText class="form-control bg-dark text-light" @bind-Value="loginData.Username" id="username"></InputText>
        </div>
        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText type="password" class="form-control bg-dark text-light" @bind-Value="loginData.Password" id="password"></InputText>
        </div>
        @foreach (string error in errors)
        {
            <b class="text-danger">Error: @(error)</b> <br />
        }
        <button type="submit" class="btn btn-primary mt-3">Log in</button>
    </EditForm>
</div>

@code {
    private AuthenticationRequest loginData = new();
    private List<string> errors = new();

    private async Task SendData()
    {
        errors.Clear();

        if (loginData.Username is null)
        {
            errors.Add("Username is required");
        }

        if (loginData.Password is null && !appUser.AdminRights)
        {
            errors.Add("Password is required");
        }

        if (errors.Count > 0)
        {
            return;
        }

        string url = "api/authentication/login";

        if (appUser.AdminRights)
        {
            url = "admin/users/login";
        }

        var request = new HttpRequestMessage(HttpMethod.Post, url)
        {
            Content = new StringContent(JsonConvert.SerializeObject(loginData), Encoding.UTF8, "application/json")
        };

        var response = await client.SendAsync(request);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            string value = await response.Content.ReadAsStringAsync();
            AuthenticationResponse auth = JsonConvert.DeserializeObject<AuthenticationResponse>(value);
            await appUser.SetLogin(auth, client);

            await localStorage.SetItemAsync("auth", auth);

            NavigationManager.NavigateTo("");
            return;
        }

        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            errors.Add("User not found");
        }

        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            errors.Add("Incorrect password");
        }
    }
}
